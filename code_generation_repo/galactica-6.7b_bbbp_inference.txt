from rdkit import Chem
from rdkit.Chem import Crippen
from rdkit.Chem import Descriptors, Lipinski

# ------------------------DK part----------------------------#
def num_benzene_ring(mol):
    """Check if the molecule contains a benzene ring."""
    aromatic_atoms = [atom.GetIsAromatic() for atom in mol.GetAtoms()]
    return aromatic_atoms.count(True)

def num_carbonyl_group(mol):
    carbonyl_group = 0
    for bond in mol.GetBonds():
        if bond.GetBondType().name == 'DOUBLE' and 'O' in [bond.GetBeginAtom().GetSymbol(), bond.GetEndAtom().GetSymbol()]:
            carbonyl_group += 1
    return carbonyl_group

def count_carbon_atoms(mol):
    # Counting the number of carbon atoms in the molecule
    if len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#6]'))) > 6 and len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#6]'))) < 18:
        return True
    return False

def hydrogen_at_end_of_benzene(mol):
    # SMARTS pattern for hydrogen attached to benzene
    pattern = Chem.MolFromSmarts('c1ccccc1[H]')
    matches = mol.GetSubstructMatches(pattern)
    return len(matches)

def nitrogen_between_benzene_and_carbonyl(mol):
    # SMARTS pattern for nitrogen bonded to two carbons and one oxygen and between benzene and carbonyl
    pattern = Chem.MolFromSmarts('c1ccccc1[N](C)(C)O')
    matches = mol.GetSubstructMatches(pattern)
    return len(matches)

def contains_benzene_ring(mol):
    """Check if the molecule contains a benzene ring. Returns 1 if it does, 0 otherwise."""
    benzene_smiles = "c1ccccc1"
    benzene = Chem.MolFromSmiles(benzene_smiles)
    return mol.HasSubstructMatch(benzene)

def count_polar_functional_groups(mol):
    """Count polar functional groups in the molecule. 
    Here we consider hydroxyl, amino, and carboxylic acid as polar groups."""
    polar_groups = ["O", "N", "C(=O)O"]
    count = 0
    for group in polar_groups:
        substructure = Chem.MolFromSmarts(group)
        count += len(mol.GetSubstructMatches(substructure))
    return count

def calculate_molecular_weight(mol):
    """Calculate the molecular weight of the molecule."""
    return Descriptors.MolWt(mol)

def check_polar_bond_in_ring(mol):
    """
    Check for a polar bond (double or triple bond) between two carbon atoms in a ring system.
    """
    for bond in mol.GetBonds():
        if bond.IsInRing() and (bond.GetBondType() == Chem.BondType.DOUBLE or bond.GetBondType() == Chem.BondType.TRIPLE):
            if bond.GetBeginAtom().GetSymbol() == "C" and bond.GetEndAtom().GetSymbol() == "C":
                return 1
    return 0

def check_carbonyl_in_ring(mol):
    """
    Check for a carbonyl group (-C=O) attached to a ring.
    """
    pattern = Chem.MolFromSmarts('[$([#6]1=[#8]-[#6]-[#6]-[#6]-[#6]-[#6]1),$([#6]1=[#8]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]1)]')
    matches = mol.GetSubstructMatches(pattern)
    return 1 if matches else 0

def check_h_bonded_to_c(mol):
    """
    Check for a hydrogen atom bonded to a carbon atom.
    """
    pattern = Chem.MolFromSmarts('[#6][#1]')
    matches = mol.GetSubstructMatches(pattern)
    return 1 if matches else 0

# Rule 1: Formation of a stable benzene ring

def has_six_carbons(mol):
    num_carbons = sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == "C")
    return 1 if num_carbons >= 6 else 0

def has_alternating_bonds(mol):
    pattern = Chem.MolFromSmarts("c1ccccc1")  # Aromatic ring with alternating single and double bonds
    return 1 if mol.HasSubstructMatch(pattern) else 0

def has_no_other_aromatics(mol):
    aromatic_atoms = sum(1 for atom in mol.GetAtoms() if atom.GetIsAromatic())
    # Return 1 if only 6 aromatic atoms (benzene) are found, otherwise 0
    return 1 if aromatic_atoms == 6 else 0

def has_carbonyl_between_rings(mol):
    pattern = Chem.MolFromSmarts("C(=O)C1=CC=CC=C1")  # Carbonyl group between benzene rings
    return 1 if mol.HasSubstructMatch(pattern) else 0

def has_hydroxyl_between_rings(mol):
    pattern = Chem.MolFromSmarts("COC1=CC=CC=C1")  # Hydroxyl group between benzene rings
    return 1 if mol.HasSubstructMatch(pattern) else 0

def has_phenyl_group(mol):
    pattern = Chem.MolFromSmarts("C1=CC=CC=C1")  # Phenyl group
    return 1 if mol.HasSubstructMatch(pattern) else 0

def has_substituted_phenyl_group(mol):
    pattern = Chem.MolFromSmarts("C1=CC=CC(=C1)C")  # Substituted phenyl group
    return 1 if mol.HasSubstructMatch(pattern) else 0

def count_carbon_atoms(mol):
    """Count the number of carbon atoms in the molecule."""
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'C')

def check_alternating_bonds(mol):
    """Check for alternating single and double bonds in sequences of six carbons."""
    # Get aromatic rings
    aromatic_rings = [ring for ring in mol.GetRingInfo().AtomRings() if len(ring) == 6]
    
    # Count rings with alternating single and double bonds
    count = 0
    for ring in aromatic_rings:
        bond_types = [mol.GetBondBetweenAtoms(ring[i], ring[i-1]).GetBondType() for i in range(6)]
        if bond_types.count(Chem.BondType.SINGLE) == 3 and bond_types.count(Chem.BondType.DOUBLE) == 3:
            count += 1
    return count

def count_aromatic_rings(mol):
    """Count the number of aromatic rings in the molecule."""
    return sum(1 for ring in mol.GetRingInfo().AtomRings() if mol.GetAtomWithIdx(ring[0]).GetIsAromatic())

def has_substituted_phenyl(mol):
    # SMARTS pattern for substituted phenyl group
    substituted_phenyl = Chem.MolFromSmarts('[cH0]1[cH][cH][cH][cH][cH]1')
    return len(mol.GetSubstructMatches(substituted_phenyl))

def count_halogen_atoms(mol):
    """Determine the number of halogen atoms in the molecule."""
    halogens = mol.GetSubstructMatches(Chem.MolFromSmarts('[F,Cl,Br,I]'))
    return len(halogens)

def position_of_halogen_atoms(mol):
    """Determine the position of halogen atoms (like bromine) in the molecule."""
    halogens = mol.GetSubstructMatches(Chem.MolFromSmarts('[F,Cl,Br,I]'))
    if halogens:
        # Return the position (atom index) of the first halogen atom found
        return halogens[0][0]
    return 0  # Return 0 if no halogens are found

def check_benzene_ring(mol):
    """Check if the molecule contains a benzene ring."""
    aromatic_atoms = [atom.GetIsAromatic() for atom in mol.GetAtoms()]
    return aromatic_atoms.count(True)

def num_of_rot_bonds(mol):
    """Calculate the number of rotatable bonds in the molecule."""
    return rdMolDescriptors.CalcNumRotatableBonds(mol)

def num_halogen(mol):
    """Check the number of halogen atoms in a molecule."""
    halogen_count = len(mol.GetSubstructMatches(Chem.MolFromSmiles('Cl'))) + len(mol.GetSubstructMatches(Chem.MolFromSmiles('F')))
    return halogen_count