from rdkit import Chem
from rdkit.Chem import Crippen
from rdkit.Chem import Descriptors, Lipinski

#-----------------------------PK part----------------------------#

def calculate_logP(mol):
    """
    Calculate the logP value of the given molecule.

    Parameters:
    - mol (rdkit.Chem.rdchem.Mol): The molecule object.

    Returns:
    - float: The logP value.
    """
    return Crippen.MolLogP(mol)

def count_polar_groups(mol):
    """
    Count the number of polar functional groups in the molecule.

    Parameters:
    - mol (rdkit.Chem.rdchem.Mol): The molecule object.

    Returns:
    - int: The count of polar functional groups (hydroxyl, amino, carboxylic acid).
    """
    # SMARTS patterns for the groups
    hydroxyl_smarts = "[OH]"
    amino_smarts = "[NH2]"
    carboxylic_acid_smarts = "C(=O)[OH]"

    # Get matches
    hydroxyl_matches = len(mol.GetSubstructMatches(Chem.MolFromSmarts(hydroxyl_smarts)))
    amino_matches = len(mol.GetSubstructMatches(Chem.MolFromSmarts(amino_smarts)))
    carboxylic_acid_matches = len(mol.GetSubstructMatches(Chem.MolFromSmarts(carboxylic_acid_smarts)))

    return hydroxyl_matches + amino_matches + carboxylic_acid_matches

def hydrogen_bond_donors(mol):
    """
    Count the number of hydrogen bond donors and acceptors in the molecule.

    Parameters:
    - mol (rdkit.Chem.rdchem.Mol): The molecule object.

    Returns:
    - tuple: (number of H-bond donors, number of H-bond acceptors).
    """
    h_donors = Descriptors.NumHDonors(mol)
    
    
    return h_donors


def hydrogen_bond_acceptors(mol):
    h_acceptors = Descriptors.NumHAcceptors(mol)

    return h_acceptors

def count_aromatic_rings(mol):
    return Lipinski.NumAromaticRings(mol)

def calculate_mol_weight(mol):
    return Descriptors.MolWt(mol)

def count_rotatable_bonds(mol):
    return Lipinski.NumRotatableBonds(mol)

def count_carbonyl_groups(mol):
    # Carbonyl group is represented by the SMARTS pattern: [C]=[O]
    carbonyl_pattern = Chem.MolFromSmarts('[C]=[O]')
    return len(mol.GetSubstructMatches(carbonyl_pattern))

def count_nitrogen_atoms(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'N')

def has_tertiary_nitrogen(mol):
    # Tertiary nitrogen has 3 bonds and no hydrogen
    tertiary_nitrogens = sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'N' and atom.GetDegree() == 3 and atom.GetTotalNumHs() == 0)
    return tertiary_nitrogens

def count_oxygen_atoms(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'O')

def count_sulfoxide_groups(mol):
    sulfoxide_pattern = Chem.MolFromSmarts('S(=O)[C,c]')
    return len(mol.GetSubstructMatches(sulfoxide_pattern))

def count_sulfur_atoms(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'S')

def count_sulfone_groups(mol):
    sulfone_pattern = Chem.MolFromSmarts('S(=O)(=O)[C,c]')
    return len(mol.GetSubstructMatches(sulfone_pattern))

def count_chlorine_atoms(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'Cl')

def count_bromine_atoms(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'Br')

# 16. Calculate the number of fluorine atoms in the molecule.
def count_fluorine_atoms(mol):
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == "F")

# 17. Check for the presence of a hydroxyl group.
def count_hydroxyl_groups(mol):
    hydroxyl_pattern = Chem.MolFromSmarts("[OH]")
    return len(mol.GetSubstructMatches(hydroxyl_pattern))

# 18. Calculate the number of nitrogen-oxygen bonds in the molecule.
def count_NO_bonds(mol):
    NO_pattern = Chem.MolFromSmarts("[N,O]")
    return sum(1 for bond in mol.GetBonds() if bond.GetBeginAtom().GetSymbol() in ["N", "O"] and bond.GetEndAtom().GetSymbol() in ["N", "O"])

# 19. Check for the presence of a nitro group.
def count_nitro_groups(mol):
    nitro_pattern = Chem.MolFromSmarts("[N+](=O)[O-]")
    return len(mol.GetSubstructMatches(nitro_pattern))

# 20. Calculate the number of carbon-nitrogen bonds in the molecule.
def count_CN_bonds(mol):
    CN_pattern = Chem.MolFromSmarts("[C,N]")
    return sum(1 for bond in mol.GetBonds() if bond.GetBeginAtom().GetSymbol() in ["C", "N"] and bond.GetEndAtom().GetSymbol() in ["C", "N"])

# ------------------------DK part----------------------------#
def rule1_benzene_ring(mol):
    """Check if the molecule contains a benzene ring."""
    aromatic_atoms = [atom.GetIsAromatic() for atom in mol.GetAtoms()]
    return aromatic_atoms.count(True)

def rule2_carbonyl_group(mol):
    carbonyl_group = 0
    for bond in mol.GetBonds():
        if bond.GetBondType().name == 'DOUBLE' and 'O' in [bond.GetBeginAtom().GetSymbol(), bond.GetEndAtom().GetSymbol()]:
            carbonyl_group += 1
    return carbonyl_group

def rule3_count_carbon_atoms(mol):
    # Counting the number of carbon atoms in the molecule
    if len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#6]'))) > 6 and len(mol.GetSubstructMatches(Chem.MolFromSmarts('[#6]'))) < 18:
        return True
    return False
    
def has_benzene_ring(mol):
    # SMARTS pattern for benzene ring
    pattern = Chem.MolFromSmarts('c1ccccc1')
    matches = mol.GetSubstructMatches(pattern)
    return len(matches)

def has_carbonyl_group(mol):
    # SMARTS pattern for carbonyl group
    pattern = Chem.MolFromSmarts('C=O')
    matches = mol.GetSubstructMatches(pattern)
    return len(matches)

def hydroxyl_at_end_of_benzene(mol):
    # SMARTS pattern for hydroxyl group attached to benzene
    pattern = Chem.MolFromSmarts('c1ccccc1O')
    matches = mol.GetSubstructMatches(pattern)
    return len(matches)

def hydrogen_at_end_of_benzene(mol):
    # SMARTS pattern for hydrogen attached to benzene
    pattern = Chem.MolFromSmarts('c1ccccc1[H]')
    matches = mol.GetSubstructMatches(pattern)
    return len(matches)

def nitrogen_between_benzene_and_carbonyl(mol):
    # SMARTS pattern for nitrogen bonded to two carbons and one oxygen and between benzene and carbonyl
    pattern = Chem.MolFromSmarts('c1ccccc1[N](C)(C)O')
    matches = mol.GetSubstructMatches(pattern)
    return len(matches)

def contains_benzene_ring(mol):
    """Check if the molecule contains a benzene ring. Returns 1 if it does, 0 otherwise."""
    benzene_smiles = "c1ccccc1"
    benzene = Chem.MolFromSmiles(benzene_smiles)
    return mol.HasSubstructMatch(benzene)

def count_polar_functional_groups(mol):
    """Count polar functional groups in the molecule. 
    Here we consider hydroxyl, amino, and carboxylic acid as polar groups."""
    polar_groups = ["O", "N", "C(=O)O"]
    count = 0
    for group in polar_groups:
        substructure = Chem.MolFromSmarts(group)
        count += len(mol.GetSubstructMatches(substructure))
    return count

def calculate_molecular_weight(mol):
    """Calculate the molecular weight of the molecule."""
    return Descriptors.MolWt(mol)

def rule1_polar_bond_in_ring(mol):
    """
    Check for a polar bond (double or triple bond) between two carbon atoms in a ring system.
    """
    for bond in mol.GetBonds():
        if bond.IsInRing() and (bond.GetBondType() == Chem.BondType.DOUBLE or bond.GetBondType() == Chem.BondType.TRIPLE):
            if bond.GetBeginAtom().GetSymbol() == "C" and bond.GetEndAtom().GetSymbol() == "C":
                return 1
    return 0

def rule2_carbonyl_in_ring(mol):
    """
    Check for a carbonyl group (-C=O) attached to a ring.
    """
    pattern = Chem.MolFromSmarts('[$([#6]1=[#8]-[#6]-[#6]-[#6]-[#6]-[#6]1),$([#6]1=[#8]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]1)]')
    matches = mol.GetSubstructMatches(pattern)
    return 1 if matches else 0

def rule3_h_bonded_to_c(mol):
    """
    Check for a hydrogen atom bonded to a carbon atom.
    """
    pattern = Chem.MolFromSmarts('[#6][#1]')
    matches = mol.GetSubstructMatches(pattern)
    return 1 if matches else 0

# Rule 1: Formation of a stable benzene ring

def has_six_carbons(mol):
    num_carbons = sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == "C")
    return 1 if num_carbons >= 6 else 0

def has_alternating_bonds(mol):
    pattern = Chem.MolFromSmarts("c1ccccc1")  # Aromatic ring with alternating single and double bonds
    return 1 if mol.HasSubstructMatch(pattern) else 0

def has_no_other_aromatics(mol):
    aromatic_atoms = sum(1 for atom in mol.GetAtoms() if atom.GetIsAromatic())
    # Return 1 if only 6 aromatic atoms (benzene) are found, otherwise 0
    return 1 if aromatic_atoms == 6 else 0

# Rule 2: Polar bond between two benzene rings

def has_carbonyl_between_rings(mol):
    pattern = Chem.MolFromSmarts("C(=O)C1=CC=CC=C1")  # Carbonyl group between benzene rings
    return 1 if mol.HasSubstructMatch(pattern) else 0

def has_hydroxyl_between_rings(mol):
    pattern = Chem.MolFromSmarts("COC1=CC=CC=C1")  # Hydroxyl group between benzene rings
    return 1 if mol.HasSubstructMatch(pattern) else 0

# Rule 3: Suitable substituent group on one of the benzene rings

def has_phenyl_group(mol):
    pattern = Chem.MolFromSmarts("C1=CC=CC=C1")  # Phenyl group
    return 1 if mol.HasSubstructMatch(pattern) else 0

def has_substituted_phenyl_group(mol):
    pattern = Chem.MolFromSmarts("C1=CC=CC(=C1)C")  # Substituted phenyl group
    return 1 if mol.HasSubstructMatch(pattern) else 0

def count_carbon_atoms(mol):
    """Count the number of carbon atoms in the molecule."""
    return sum(1 for atom in mol.GetAtoms() if atom.GetSymbol() == 'C')

def check_alternating_bonds(mol):
    """Check for alternating single and double bonds in sequences of six carbons."""
    # Get aromatic rings
    aromatic_rings = [ring for ring in mol.GetRingInfo().AtomRings() if len(ring) == 6]
    
    # Count rings with alternating single and double bonds
    count = 0
    for ring in aromatic_rings:
        bond_types = [mol.GetBondBetweenAtoms(ring[i], ring[i-1]).GetBondType() for i in range(6)]
        if bond_types.count(Chem.BondType.SINGLE) == 3 and bond_types.count(Chem.BondType.DOUBLE) == 3:
            count += 1
    return count

def count_aromatic_rings(mol):
    """Count the number of aromatic rings in the molecule."""
    return sum(1 for ring in mol.GetRingInfo().AtomRings() if mol.GetAtomWithIdx(ring[0]).GetIsAromatic())

def count_interfering_groups(mol):
    """Count functional groups that could interfere with the formation of a benzene ring."""
    # Here, we are assuming groups like -OH, -NH2, and -COOH as interfering groups
    # More groups can be added as needed
    patterns = [
        Chem.MolFromSmarts('[OH]'),
        Chem.MolFromSmarts('[NH2]'),
        Chem.MolFromSmarts('C(=O)[OH]')
    ]
    return sum(len(mol.GetSubstructMatches(pattern)) for pattern in patterns)

def has_carbonyl_between_rings(mol):
    """
    Checks if there's a carbonyl group between two benzene rings.
    
    Parameters:
        mol (rdkit.Chem.Mol): The molecule object to check.
        
    Returns:
        int: 1 if there's a carbonyl group between two benzene rings, 0 otherwise.
    """
    # SMARTS pattern for a carbonyl group (-C=O) connected to a benzene ring atom
    pattern = "[cR1]~[C]=[O]"
    matches = mol.GetSubstructMatches(Chem.MolFromSmarts(pattern))
    return 1 if matches else 0

def has_hydroxyl_between_rings(mol):
    """
    Checks if there's a hydroxyl group between two benzene rings.
    
    Parameters:
        mol (rdkit.Chem.Mol): The molecule object to check.
        
    Returns:
        int: 1 if there's a hydroxyl group between two benzene rings, 0 otherwise.
    """
    # SMARTS pattern for a hydroxyl group (-OH) connected to a benzene ring atom
    pattern = "[cR1]~[OH]"
    matches = mol.GetSubstructMatches(Chem.MolFromSmarts(pattern))
    return 1 if matches else 0

def has_substituted_phenyl(mol):
    # SMARTS pattern for substituted phenyl group
    substituted_phenyl = Chem.MolFromSmarts('[cH0]1[cH][cH][cH][cH][cH]1')
    return len(mol.GetSubstructMatches(substituted_phenyl))

def count_halogen_atoms(mol):
    """Determine the number of halogen atoms in the molecule."""
    halogens = mol.GetSubstructMatches(Chem.MolFromSmarts('[F,Cl,Br,I]'))
    return len(halogens)

def position_of_halogen_atoms(mol):
    """Determine the position of halogen atoms (like bromine) in the molecule."""
    halogens = mol.GetSubstructMatches(Chem.MolFromSmarts('[F,Cl,Br,I]'))
    if halogens:
        # Return the position (atom index) of the first halogen atom found
        return halogens[0][0]
    return 0  # Return 0 if no halogens are found

def check_benzene_ring(mol):
    """Check if the molecule contains a benzene ring."""
    aromatic_atoms = [atom.GetIsAromatic() for atom in mol.GetAtoms()]
    return aromatic_atoms.count(True)

def num_of_rot_bonds(mol):
    """Calculate the number of rotatable bonds in the molecule."""
    return rdMolDescriptors.CalcNumRotatableBonds(mol)

def check_halogen(mol):
    """Check the number of halogen atoms in a molecule."""
    halogen_count = len(mol.GetSubstructMatches(Chem.MolFromSmiles('Cl'))) + len(mol.GetSubstructMatches(Chem.MolFromSmiles('F')))
    return halogen_count

    
